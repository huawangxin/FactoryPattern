设计模式-系统中的某部分改变不会影响其他部分
1、策略模式
定义：定义了算法簇，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
设计原则： 1）找出应用中可能需要变化之处，把他它们独立出来，不要和那些不需要变化的代码混在一起。
 	   2）针对接口编程，而不是针对实现编程。（“针对接口编程”真正的意思是“针对超类型（supertype）编程”）
	   3)多用组合，少用继承。

2、观察者模式
定义：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更新。
设计原则：1）封装变化
	   2）多用组合，少用继承
	   3）针对接口编程，不针对实现编程
	   4）为了交互对象之间的松耦合设计儿努力
	   
3、装饰者模式
定义：动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
设计原则：1）类应该对扩展开放，对修改关闭；（开放关闭原则）

4、工厂模式
定义：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
[定义了一个创建对象的接口，但由自雷决定要实例化的类hi哪一个，工厂方法让类把实例化推迟到子类。]
设计原则：1）依赖倒置原则（要依赖抽象，不要依赖具体类）。

简单工厂模式其实不是一个设计模式，反而像一种变成习惯。
利用静态方法定义的一个简单工厂，不需要使用创建对象的方法来实例化对象，缺点是不能通过集成来改变创建方法的行为。

抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指出具体类。




 	
      